import React, { useEffect, useState } from "react";
import axios from "../api/axios";
import "../styles/AdminPanel.scss";

function AdminPage() {
  const [tables, setTables] = useState([]);
  const [views, setViews] = useState([]);
  const [allData, setAllData] = useState({});
  const [viewData, setViewData] = useState({});
  const [editedRows, setEditedRows] = useState({});
  const [newRows, setNewRows] = useState({});

  const viewsInfo = {
    view_1: { title: "–í—Å–µ —Ç—É—Ä—ã", description: "–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç—É—Ä–æ–≤, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤ –∞–≥–µ–Ω—Ç—Å—Ç–≤–µ." },
    view_2: { title: "–ö–ª–∏–µ–Ω—Ç—ã —Å —Ç—É—Ä–∞–º–∏", description: "–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤ –∞–≥–µ–Ω—Ç—Å—Ç–≤–µ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∏–º–∏ —Ç—É—Ä–æ–≤." },
    view_3: { title: "–ì–æ—Ä–æ–¥–∞ —Å —Ç—É—Ä–∞–º–∏", description: "–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω, –≤ –∫–æ—Ç–æ—Ä—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç—É—Ä—ã —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç–∏." },
    view_4: { title: "–¢—É—Ä—ã –ø–æ —Ç–∏–ø—É", description: "–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç—É—Ä–æ–≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —ç–∫—Å–∫—É—Ä—Å–∏–æ–Ω–Ω—ã–µ —Ç—É—Ä—ã)." },
    view_5: { title: "–ö–ª–∏–µ–Ω—Ç—ã –ø–æ –¥–∞—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è", description: "–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª–∏ —Ç—É—Ä –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏." },
    view_6: { title: "–ö–ª–∏–µ–Ω—Ç—ã —Å —Ç—Ä–∞—Ç–∞–º–∏ –±–æ–ª—å—à–µ —Å—É–º–º—ã", description: "–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤, —Å—É–º–º–∞ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö –∏–º–∏ –¥–µ–Ω–µ–≥ –Ω–∞ —Ç—É—Ä—ã –ø—Ä–µ–≤—ã—à–∞–µ—Ç –∑–∞–¥–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ." },
    view_7: { title: "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç—É—Ä—ã –ø–æ –¥–∞—Ç–µ", description: "–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç—É—Ä–æ–≤, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏." },
    view_8: { title: "–ö–ª–∏–µ–Ω—Ç—ã –ø–æ —Ç–∏–ø—É —Ç—É—Ä–∞", description: "–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª–∏ —Ç—É—Ä—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–ª—è–∂–Ω—ã–π –æ—Ç–¥—ã—Ö)." },
    view_9: { title: "–¢—É—Ä—ã —Å –º–µ—Å—Ç–∞–º–∏", description: "–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç—É—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –∏–º–µ—é—Ç —Å–≤–æ–±–æ–¥–Ω—ã–µ –º–µ—Å—Ç–∞ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è." },
    view_10: { title: "–ö–ª–∏–µ–Ω—Ç—ã —Å —Ç—Ä–∞—Ç–∞–º–∏ –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ", description: "–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤, —É –∫–æ—Ç–æ—Ä—ã—Ö –æ–±—â–∞—è —Å—É–º–º–∞ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö –¥–µ–Ω–µ–≥ –Ω–∞ —Ç—É—Ä—ã –ø—Ä–µ–≤—ã—à–∞–µ—Ç —Å—Ä–µ–¥–Ω—é—é —Å—É–º–º—É –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö –¥–µ–Ω–µ–≥ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤." }
  };

  useEffect(() => {
    axios.get("/api/admin/tables").then(res => {
      setTables(res.data);
      return Promise.all(res.data.map(table =>
        axios.get(`/api/admin/tables/${table}`)
          .then(res => ({ table, data: res.data }))
          .catch(() => ({ table, data: [], error: true }))
      ));
    }).then(results => {
      const merged = {};
      results.forEach(({ table, data }) => {
        merged[table] = data;
      });
      setAllData(merged);
    });

    axios.get("/api/admin/views").then(res => {
      setViews(res.data);
      return Promise.all(res.data.map(view =>
        axios.get(`/api/admin/views/${view}`)
          .then(res => ({ view, data: res.data }))
          .catch(() => ({ view, data: [], error: true }))
      ));
    }).then(results => {
      const merged = {};
      results.forEach(({ view, data }) => {
        merged[view] = data;
      });
      setViewData(merged);
    });
  }, []);

  const handleEdit = (table, rowIndex, key, value) => {
    const updated = [...(allData[table] || [])];
    updated[rowIndex][key] = value;
    setAllData({ ...allData, [table]: updated });
    setEditedRows({
      ...editedRows,
      [table]: {
        ...(editedRows[table] || {}),
        [updated[rowIndex].id]: updated[rowIndex],
      },
    });
  };

  const handleSave = (table, rowId) => {
    const updatedRow = editedRows[table][rowId];
    axios.put(`/api/admin/tables/${table}/${rowId}`, updatedRow).then(() => {
      const remaining = { ...editedRows };
      delete remaining[table][rowId];
      if (Object.keys(remaining[table]).length === 0) delete remaining[table];
      setEditedRows(remaining);
    });
  };

  const handleDelete = (table, rowId) => {
    axios.delete(`/api/admin/tables/${table}/${rowId}`).then(() => {
      const filtered = allData[table].filter((r) => r.id !== rowId);
      setAllData({ ...allData, [table]: filtered });
    });
  };

  const handleNewRowChange = (table, key, value) => {
    setNewRows({
      ...newRows,
      [table]: {
        ...(newRows[table] || {}),
        [key]: value,
      },
    });
  };

  const handleAddRow = (table) => {
    const rowToAdd = newRows[table] || {};
    axios.post(`/api/admin/tables/${table}`, rowToAdd).then((res) => {
      const updated = [...(allData[table] || []), res.data]; // üîß –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—É—é —Å—Ç—Ä–æ–∫—É –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
      setAllData({ ...allData, [table]: updated });
      setNewRows({ ...newRows, [table]: {} });
    });
  };

  const renderTableBlock = (name, data, editable) => {
    if (!data || data.length === 0) return <p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.</p>;

    return (
      <table>
        <thead>
          <tr>
            {Object.keys(data[0]).map((col, i) => <th key={i}>{col}</th>)}
            {editable && <th>–î–µ–π—Å—Ç–≤–∏—è</th>}
          </tr>
        </thead>
        <tbody>
          {data.map((row, rowIndex) => (
            <tr key={row.id || rowIndex}>
              {Object.entries(row).map(([key, val], colIndex) => (
                <td key={colIndex}>
                  {editable && key !== "id" ? (
                    <input value={val ?? ""} onChange={(e) => handleEdit(name, rowIndex, key, e.target.value)} />
                  ) : val ?? "-"}
                </td>
              ))}
              {editable && (
                <td>
                  <button onClick={() => handleSave(name, row.id)}>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                  <button onClick={() => handleDelete(name, row.id)}>–£–¥–∞–ª–∏—Ç—å</button>
                </td>
              )}
            </tr>
          ))}
          {editable && (
            <tr>
              {Object.keys(data[0]).map((key, i) => (
                <td key={i}>
                  {["id", "created_at", "updated_at"].includes(key) ? "-" : (
                    <input
                      value={(newRows[name]?.[key] ?? "")}
                      onChange={(e) => handleNewRowChange(name, key, e.target.value)}
                    />
                  )}
                </td>
              ))}
              <td>
                <button onClick={() => handleAddRow(name)}>–î–æ–±–∞–≤–∏—Ç—å</button>
              </td>
            </tr>
          )}
        </tbody>
      </table>
    );
  };

  return (
    <div className="adminPage">
      <h2>–¢–∞–±–ª–∏—Ü—ã</h2>
      {tables.map((table) => (
        <div key={table} className="adminPage__tableBlock">
          <h3>{table}</h3>
          {renderTableBlock(table, allData[table], true)}
        </div>
      ))}

      <h2>–ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è</h2>
      {views.map((view) => {
        const info = viewsInfo[view] || {};
        return (
          <div key={view} className="adminPage__tableBlock">
            <h3>{info.title || view}</h3>
            <p>{info.description || "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è."}</p>
            {renderTableBlock(view, viewData[view], false)}
          </div>
        );
      })}
    </div>
  );
}

export default AdminPage;
